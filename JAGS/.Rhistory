install.packages("rjags")
library(rjags)
require(rjags)
source('~/Dropbox/Research/Consciousness/StateSpace/awarenessSim.R')
source('~/Dropbox/Research/Consciousness/StateSpace/awarenessSim.R')
source('~/Dropbox/Research/Consciousness/StateSpace/awarenessSim.R')
source('~/Dropbox/Research/Consciousness/StateSpace/awarenessSim.R')
source('~/Dropbox/Research/Consciousness/StateSpace/awarenessSim.R')
source('~/Dropbox/Research/Consciousness/StateSpace/awarenessSim.R')
# install lavaan if it isn't already installed
if(!require("lavaan")) install.packages("lavaan", repos="http://cran.rstudio.com/")
# make up some data with one mediator
set.seed(06052017)
X <- rnorm(100)
M <- 0.5*X + rnorm(100)
Y <- 0.7*M + rnorm(100)
Data <- data.frame(X = X, Y = Y, M = M)
simpleMediation <- '
Y ~ b * M + c * X
M ~ a * X
indirect := a * b
total    := c + (a * b)
'
require("lavaan")
fit <- sem(model = simpleMediation,	data  = Data)
summary(fit)
read.csv("~/Dropbox/Published/RollwageCurrBiol2018/Data/Study23combineddata.csv")
data <- read.csv("~/Dropbox/Published/RollwageCurrBiol2018/Data/Study23combineddata.csv")
head(data)
data <- read.csv("~/Dropbox/Published/RollwageCurrBiol2018/Data/Study23combineddata.csv")
data
head(data)
data <- read.csv("~/Dropbox/Published/RollwageCurrBiol2018/Data/Study23combineddata.csv")
head(data)
data <- read.csv("~/Dropbox/Published/RollwageCurrBiol2018/Data/Study23combineddata.csv")
head(data)
## multiple mediator example
# add a second mediator to the dataset
multipleMediation <- '
AbsPol ~ b1 * Dog + b2 * Auth + c * Meta
Dog ~ a1 * Meta
Auth ~ a2 * Meta
indirect1 := a1 * b1
indirect2 := a2 * b2
contrast := indirect1 - indirect2
total    := c + (a1 * b1) + (a2 * b2)
M1 ~~ M2
'
fit <- sem(model = multipleMediation, data = Data)
summary(fit)
# load the data
data <- read.csv("~/Dropbox/Published/RollwageCurrBiol2018/Data/Study23combineddata.csv")
## multiple mediator example
# add a second mediator to the dataset
multipleMediation <- '
AbsPol ~ b1 * Dog + b2 * Auth + c * Meta
Dog ~ a1 * Meta
Auth ~ a2 * Meta
indirect1 := a1 * b1
indirect2 := a2 * b2
contrast := indirect1 - indirect2
total    := c + (a1 * b1) + (a2 * b2)
M1 ~~ M2
'
fit <- sem(model = multipleMediation, data = data)
summary(fit)
## multiple mediator example
# add a second mediator to the dataset
multipleMediation <- '
AbsPol ~ b1 * Dog + b2 * Auth + c * Meta
Dog ~ a1 * Meta
Auth ~ a2 * Meta
indirect1 := a1 * b1
indirect2 := a2 * b2
contrast := indirect1 - indirect2
total    := c + (a1 * b1) + (a2 * b2)
Dog ~~ Auth
'
fit <- sem(model = multipleMediation, data = data)
summary(fit)
# load the data
data <- read.csv("~/Dropbox/Published/RollwageCurrBiol2018/Data/Study23combineddata.csv")
## multiple mediator example
# add a second mediator to the dataset
multipleMediation <- '
AbsPol ~ b1 * Dog + b2 * Auth + c * Meta
Dog ~ a1 * Meta
Auth ~ a2 * Meta
indirect1 := a1 * b1
indirect2 := a2 * b2
contrast := indirect1 - indirect2
total    := c + (a1 * b1) + (a2 * b2)
Dog ~~ Auth
'
fit <- sem(model = multipleMediation, data = data, se = "bootstrap", bootsrap = 5000)
summary(fit)
# obtaining more output
summary(fit, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE,
estimates = TRUE, ci = TRUE)
fit <- sem(model = multipleMediation, data = data, se = "bootstrap", bootsrap = 5000)
summary(fit)
# obtaining more output
summary(fit, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE,
estimates = TRUE, ci = TRUE)
histogram(data$AbsPol)
hist(data$AbsPol)
hist(data$Meta)
hist(data$Dog)
hist(data$Auth)
hist(data$Meta)
source('~/Dropbox/Published/RollwageCurrBiol2018/Data/multiple_mediation.R')
source('~/Dropbox/Published/RollwageCurrBiol2018/Data/multiple_mediation.R')
hist(data$AbsPol)
summary(fit, fit.measures=TRUE, standardize=TRUE, rsquare=TRUE,
estimates = TRUE, ci = TRUE)
source('~/Dropbox/InPrep/Covid/Perceptions of growth/growth_analysis.R')
trialData = summarise(groupData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
ggplot(trialData, aes(x=guess_index_binned, y=medresp, group=condition, col=condition)) + geom_line()
ggplot(trialData, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
# Do plots at the trial level, aggregating across subject
ggplot(bigData, aes(x=weber_error, y=conf, group=condition, col=condition)) + geom_point() + xlim(0, 10)
conditionData <- group_by(bigData, subj, condition)
conditionSummary = summarise(conditionData, meanresp=mean(resp, na.rm=TRUE), medconf=median(conf, na.rm=TRUE), mederror=median(error, na.rm=TRUE), medweber=median(weber_error, na.rm=TRUE))
boxplot(medconf ~ condition, data=conditionSummary)
bigData$condition
rm(list=ls())
require(R.matlab)
require(lme4)
require(car)
require(optimx)
require(stargazer)
require(GGally)
require(dplyr)
require(ggplot2)
options(contrasts = c("contr.treatment", "contr.poly")) # This is R defaults but set it anyway to be safe
ntrials = 30
# function_names = c("linear", "logistic", "exponential")
function_names = c("linear", "exponential")
# Load data
alldata = NULL
allids = NULL
allnb = NULL
# PILOT DATA (v23-24 from wider Qualtrics study, v30 from Prolific sample)
setwd("~/Dropbox/InPrep/Covid/Perceptions of growth/pilot data")
spreadsheets = c("data_exp_14641-v23_task-9meo_v23_Spreadsheet4.csv", "data_exp_14641-v23_task-57dm_v23_Spreadsheet1.csv", "data_exp_14641-v23_task-f13c_v23_Spreadsheet2.csv",
"data_exp_14641-v23_task-szgy_v23_Spreadsheet3.csv", "data_exp_14641-v24_task-9meo_v24_Spreadsheet4.csv", "data_exp_14641-v24_task-57dm_v24_Spreadsheet1.csv",
"data_exp_14641-v24_task-f13c_v24_Spreadsheet2.csv", "data_exp_14641-v24_task-szgy_v24_Spreadsheet3.csv", "data_exp_14641-v30_task-9meo.csv", "data_exp_14641-v30_task-57dm.csv", "data_exp_14641-v30_task-f13c.csv", "data_exp_14641-v30_task-szgy.csv")
for (s in 1:length(spreadsheets)){
currdata = read.csv(spreadsheets[s], stringsAsFactors=FALSE)
currdata = as.data.frame(currdata)
alldata = rbind(alldata, currdata)
}
alldata$order.dkds <- NULL # remove extra unused column present in early runs of task
ids = unique(alldata$Participant.Public.ID)
ids = ids[!is.na(ids)]
allids = c(allids, ids)
allnb = c(allnb, rep(6, length(ids)))
currdata
currdata$metadata
currdata$metadata == "logistic"
currdata = currdata[!currdata$metadata == "logistic", ]
currdata$randomise_blocks
for (s in 1:length(spreadsheets)){
currdata = read.csv(spreadsheets[s], stringsAsFactors=FALSE)
currdata = as.data.frame(currdata)
# omit logistic function that was included for these initial participants; recode block numbers
currdata = currdata[!currdata$metadata == "logistic", ]
currdata$randomise_blocks[currdata$randomise_blocks == 3] = 2
currdata$randomise_blocks[currdata$randomise_blocks == 4] = 3
currdata$randomise_blocks[currdata$randomise_blocks == 6] = 4
alldata = rbind(alldata, currdata)
}
currdata$randomise_blocks[currdata$randomise_blocks == 3]
currdata$randomise_blocks[currdata$randomise_blocks == 3] = 2
currdata
rm(list=ls())
require(R.matlab)
require(lme4)
require(car)
require(optimx)
require(stargazer)
require(GGally)
require(dplyr)
require(ggplot2)
options(contrasts = c("contr.treatment", "contr.poly")) # This is R defaults but set it anyway to be safe
ntrials = 30
# function_names = c("linear", "logistic", "exponential")
function_names = c("linear", "exponential")
# Load data
alldata = NULL
allids = NULL
allnb = NULL
# PILOT DATA (v23-24 from wider Qualtrics study, v30 from Prolific sample)
setwd("~/Dropbox/InPrep/Covid/Perceptions of growth/pilot data")
spreadsheets = c("data_exp_14641-v23_task-9meo_v23_Spreadsheet4.csv", "data_exp_14641-v23_task-57dm_v23_Spreadsheet1.csv", "data_exp_14641-v23_task-f13c_v23_Spreadsheet2.csv",
"data_exp_14641-v23_task-szgy_v23_Spreadsheet3.csv", "data_exp_14641-v24_task-9meo_v24_Spreadsheet4.csv", "data_exp_14641-v24_task-57dm_v24_Spreadsheet1.csv",
"data_exp_14641-v24_task-f13c_v24_Spreadsheet2.csv", "data_exp_14641-v24_task-szgy_v24_Spreadsheet3.csv", "data_exp_14641-v30_task-9meo.csv", "data_exp_14641-v30_task-57dm.csv", "data_exp_14641-v30_task-f13c.csv", "data_exp_14641-v30_task-szgy.csv")
for (s in 1:length(spreadsheets)){
currdata = read.csv(spreadsheets[s], stringsAsFactors=FALSE)
currdata = as.data.frame(currdata)
# omit logistic function that was included for these initial participants; recode block numbers
currdata = currdata[!currdata$metadata == "logistic", ]
currdata$randomise_blocks[currdata$randomise_blocks == 3] = 2
currdata$randomise_blocks[currdata$randomise_blocks == 4] = 3
currdata$randomise_blocks[currdata$randomise_blocks == 6] = 4
alldata = rbind(alldata, currdata)
}
alldata
alldata$randomise_blocks
alldata$order.dkds <- NULL # remove extra unused column present in early runs of task
ids = unique(alldata$Participant.Public.ID)
ids = ids[!is.na(ids)]
allids = c(allids, ids)
allnb = c(allnb, rep(4, length(ids)))
t = seq(1, ntrials)
t
N0 = 5
t = seq(1, ntrials)
m = c(37, 130);
tau = c(3, 3.7)
Nt_lin1 = N0 + m[1]*t;
Nt_lin1
Nt_lin2 = N0 + m[2]*t;
Nt_lin2
N0 = 5
t = seq(1, ntrials-1)
m = c(37, 130);
tau = c(3, 3.7)
# Linear growth
Nt_lin1 = N0 + m[1]*t;
Nt_lin2 = N0 + m[2]*t;
# Exponential growth
Nt_exp1 = N0 * 2.^(t/tau[1]);
Nt_exp2 = N0 * 2.^(t/tau[2]);
# Linear growth
Nt_lin1 = N0 + m[1]*t;
Nt_lin1 = c(N0, Nt_lin1)
Nt_lin2 = N0 + m[2]*t;
Nt_lin2 = c(N0, Nt_lin2)
# Exponential growth
Nt_exp1 = N0 * 2.^(t/tau[1]);
Nt_exp1 = c(N0, Nt_exp1)
Nt_exp2 = N0 * 2.^(t/tau[2]);
Nt_exp2 = c(N0, Nt_exp2)
plot(Nt_exp1)
plot(Nt_exp2)
Nt_lin1
Nt_lin2
source('~/Dropbox/InPrep/Covid/Perceptions of growth/growth_analysis.R')
head(bigData)
head(subjectData)
# Reduce to subject means by condition
conditionData <- group_by(bigData, subj, block)
conditionSummary = summarise(conditionData, meanresp=mean(resp, na.rm=TRUE), medconf=median(conf, na.rm=TRUE), mederror=median(error, na.rm=TRUE), medweber=median(weber_error, na.rm=TRUE))
boxplot(medconf ~ block, data=conditionSummary)
head(conditionSummary)
head(bigData)
head(conditionSummary)
head(conditionData)
groupData <- group_by(bigData, guess_index_binned, block)
trialData = summarise(groupData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
trialData
groupData <- group_by(bigData, block, guess_index_binned)
groupData
trialData = summarise(groupData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
trialData
ggplot(trialData, aes(x=guess_index_binned, y=medresp, group=condition, col=condition)) + geom_line()
ggplot(trialData, aes(x=guess_index_binned, y=medresp, group=block, col=block)) + geom_line()
ggplot(trialData, aes(x=guess_index_binned, y=medresp, group=block, col=block)) + geom_points()
ggplot(trialData, aes(x=guess_index_binned, y=medresp, group=block, col=block)) + geom_point()
trialData
ggplot(trialData, aes(x=guess_index_bins, y=medresp, group=block, col=block)) + geom_point()
guess_index_bins
ggplot(trialData, aes(x=c(guess_index_bins, 40), y=medresp, group=block, col=block)) + geom_point()
max(trialData$guess_index_binned)
trialData$guess_index_binned
t = seq(1, ntrials)
ggplot(trialData, aes(x=t, y=Nt_lin1))
t = seq(1, ntrials)
ggplot(aes(x=t, y=Nt_lin1))
groundtruth$N0 = 5
groundtruth = NULL
groundtruth$N0 = 5
groundtruth = NULL
groundtruth$N0 = 5
t = seq(1, ntrials-1)
groundtruth$t = seq(1, ntrials)
groundtruth$m = c(37, 130);
groundtruth$tau = c(3, 3.7)
# Linear growth
groundtruth$Nt_lin1 = N0 + groundtruth$m[1]*t;
groundtruth$Nt_lin1 = c(N0, groundtruth$Nt_lin1)
groundtruth$Nt_lin2 = N0 + groundtruth$m[2]*t;
groundtruth$Nt_lin2 = c(N0, groundtruth$Nt_lin2)
# Exponential growth
groundtruth$Nt_exp1 = N0 * 2.^(t/groundtruth$tau[1]);
groundtruth$Nt_exp1 = c(N0, groundtruth$Nt_exp1)
groundtruth$Nt_exp2 = N0 * 2.^(t/groundtruth$tau[2]);
groundtruth$Nt_exp2 = c(N0, groundtruth$Nt_exp2)
groundtruth
ggplot(groundtruth, aes(x=t, y=Nt_lin1))
ggplot(trialData, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
as.data.frame(groundtruth)
groundtruth = NULL
groundtruth$N0 = 5
t = seq(1, ntrials-1)
groundtruth$t = seq(1, ntrials)
m = c(37, 130);
tau = c(3, 3.7)
# Linear growth
groundtruth$Nt_lin1 = N0 + m[1]*t;
groundtruth$Nt_lin1 = c(N0, groundtruth$Nt_lin1)
groundtruth$Nt_lin2 = N0 + m[2]*t;
groundtruth$Nt_lin2 = c(N0, groundtruth$Nt_lin2)
# Exponential growth
groundtruth$Nt_exp1 = N0 * 2.^(t/tau[1]);
groundtruth$Nt_exp1 = c(N0, groundtruth$Nt_exp1)
groundtruth$Nt_exp2 = N0 * 2.^(t/tau[2]);
groundtruth$Nt_exp2 = c(N0, groundtruth$Nt_exp2)
groundtruth = as.data.frame(groundtruth)
ggplot(groundtruth, aes(x=t, y=Nt_lin1))
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line()
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line() + geom_line(aes(x=t, y=Nt_lin2))
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line() + geom_line(aes(x=t, y=Nt_lin2)) + geom_line(aes(x=t, y=Nt_exp1)) + geom_line(aes(x=t, y=Nt_exp2))
# Guesses are pseudorandomly distributed, so group them together for plotting
bigData$guess_index_binned = NA
guess_index_bins = seq(1,39,length.out=11)
for (b in 1:(length(guess_index_bins)-1)){
bigData$guess_index_binned[bigData$guess_index >= guess_index_bins[b] & bigData$guess_index < guess_index_bins[b+1]] <- (guess_index_bins[b] + guess_index_bins[b+1])/2
}
bigData$guess_index_binned[bigData$guess_index == 40] <- 40
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line() + geom_line(aes(x=t, y=Nt_lin2)) + geom_line(aes(x=t, y=Nt_exp1)) + geom_line(aes(x=t, y=Nt_exp2)) + geom_point(data=trialData, aes(x=guess_index_binned, y=medresp, group=block, col=block))
source('~/Dropbox/InPrep/Covid/Perceptions of growth/growth_analysis.R')
source('~/Dropbox/InPrep/Covid/Perceptions of growth/growth_analysis.R')
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line() + geom_line(aes(x=t, y=Nt_lin2)) + geom_line(aes(x=t, y=Nt_exp1)) + geom_line(aes(x=t, y=Nt_exp2)) + geom_point(data=trialData, aes(x=guess_index_binned, y=medresp, group=block, col=block))
bigData$guess_index_binned = NA
guess_index_bins = seq(1,39,length.out=11)
for (b in 1:(length(guess_index_bins)-1)){
bigData$guess_index_binned[bigData$guess_index >= guess_index_bins[b] & bigData$guess_index < guess_index_bins[b+1]] <- b
}
bigData$guess_index_binned[bigData$guess_index == 40] <- length(guess_index_bins)
# Reduce to subject means by trial for descriptives plotting
groupData <- group_by(bigData, block, guess_index_binned)
trialData = summarise(groupData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
ggplot(trialData, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line() + geom_line(aes(x=t, y=Nt_lin2)) + geom_line(aes(x=t, y=Nt_exp1)) + geom_line(aes(x=t, y=Nt_exp2)) + geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
trialData
ggplot(trialData, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
# Reduce to subject means by condition
conditionData <- group_by(bigData, condition, guess_index_binned)
conditionSummary = summarise(groupData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
## PLOTS
# Plot responses against ground truth function
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line() + geom_line(aes(x=t, y=Nt_lin2)) + geom_line(aes(x=t, y=Nt_exp1)) + geom_line(aes(x=t, y=Nt_exp2)) + geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
# Plot mean and SE of confidence (z-scored within each subject)
ggplot(conditionData, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
conditionData <- group_by(bigData, condition, guess_index_binned)
conditionSummary = summarise(groupData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line() + geom_line(aes(x=t, y=Nt_lin2)) + geom_line(aes(x=t, y=Nt_exp1)) + geom_line(aes(x=t, y=Nt_exp2)) + geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
ggplot(conditionData, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
ggplot(conditionSummary, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
conditionSummary
conditionData <- group_by(bigData, condition, guess_index_binned)
conditionSummary = summarise(groupData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
conditionData <- group_by(bigData, condition, guess_index_binned)
conditionSummary = summarise(conditionData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
# Plot mean and SE of confidence (z-scored within each subject)
ggplot(conditionSummary, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line() + geom_line(aes(x=t, y=Nt_lin2)) + geom_line(aes(x=t, y=Nt_exp1)) + geom_line(aes(x=t, y=Nt_exp2)) + geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
conditionSummary
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) + geom_line()
+ geom_line(aes(x=t, y=Nt_lin2))
+ geom_line(aes(x=t, y=Nt_exp1))
+ geom_line(aes(x=t, y=Nt_exp2))
+ geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
+ geom_errorbar(data=trialData, aes(x=guess_index_binned*3, ymin=medresp-semresp), ymax=medresp+semresp)
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) +
geom_line() +
geom_line(aes(x=t, y=Nt_lin2)) +
geom_line(aes(x=t, y=Nt_exp1)) +
geom_line(aes(x=t, y=Nt_exp2)) +
geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block)) +
geom_errorbar(data=trialData, aes(x=guess_index_binned*3, ymin=medresp-semresp), ymax=medresp+semresp)
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) +
geom_line() +
geom_line(aes(x=t, y=Nt_lin2)) +
geom_line(aes(x=t, y=Nt_exp1)) +
geom_line(aes(x=t, y=Nt_exp2)) +
geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) +
geom_line() +
geom_line(aes(x=t, y=Nt_lin2)) +
geom_line(aes(x=t, y=Nt_exp1)) +
geom_line(aes(x=t, y=Nt_exp2)) +
geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block)) +
geom_errorbar(data=trialData, aes(x=guess_index_binned*3, ymin=medresp-semresp, ymax=medresp+semresp))
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) +
geom_line() +
geom_line(aes(x=t, y=Nt_lin2)) +
geom_line(aes(x=t, y=Nt_exp1)) +
geom_line(aes(x=t, y=Nt_exp2)) +
geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
trialData
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) +
geom_line() +
geom_line(aes(x=t, y=Nt_lin2)) +
geom_line(aes(x=t, y=Nt_exp1)) +
geom_line(aes(x=t, y=Nt_exp2)) +
geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block)) +
geom_errorbar(data=trialData, aes(x=guess_index_binned*3, ymin=medresp-semresp, ymax=medresp+semresp))
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) +
geom_line() +
geom_line(aes(x=t, y=Nt_lin2)) +
geom_line(aes(x=t, y=Nt_exp1)) +
geom_line(aes(x=t, y=Nt_exp2)) +
geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
allconf
ggplot(conditionSummary, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
ggplot(conditionSummary, aes(x=guess_index_binned, y=medresp, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medresp-semresp, ymax=medresp+semresp) ,alpha=0.2)
# Plot mean and SE of confidence (z-scored within each subject)
ggplot(conditionSummary, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
## REGRESSIONS
bigData$condition = relevel(bigData$condition, ref="linear")
# Hierarchical linear model of confidence
confModel = lmer(conf ~ (guess_index + weber_error)*condition + (1|subj), data=bigData, control = lmerControl(optimizer = "optimx", calc.derivs = FALSE, optCtrl = list(method = "bobyqa", starttests = FALSE, kkt = FALSE)))
print(summary(confModel))
print(Anova(confModel, type=3))
hist(resid(confModel))
# Hierarchical linear model predicting response
respModel = lmer(resp ~ (guess_index + pre)*condition + (1|subj), data=bigData, control = lmerControl(optimizer = "optimx", calc.derivs = FALSE, optCtrl = list(method = "bobyqa", starttests = FALSE, kkt = FALSE)))
print(summary(respModel))
print(Anova(respModel, type=3))
hist(resid(respModel))
# Hierarchical linear model predicting Weber error
errorModel = lmer(weber_error ~ guess_index*condition + (1|subj), data=bigData, control = lmerControl(optimizer = "optimx", calc.derivs = FALSE, optCtrl = list(method = "bobyqa", starttests = FALSE, kkt = FALSE)))
print(summary(errorModel))
print(Anova(errorModel, type=3))
hist(resid(errorModel))
## PLOTS
# Plot responses against ground truth function
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) +
geom_line() +
geom_line(aes(x=t, y=Nt_lin2)) +
geom_line(aes(x=t, y=Nt_exp1)) +
geom_line(aes(x=t, y=Nt_exp2)) +
geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
# Reduce to subject means by trial for descriptives plotting
groupData <- group_by(bigData, block, guess_index_binned)
trialData = summarise(groupData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
# Reduce to subject means by condition
conditionData <- group_by(bigData, condition, guess_index_binned)
conditionSummary = summarise(conditionData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
# Plot mean and SE of confidence (z-scored within each subject)
ggplot(conditionSummary, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
subjectData
help("summarise")
conditionData <- group_by(bigData, condition, guess_index_binned)
conditionData = summarise(conditionData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
ggplot(conditionData, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) + geom_line() +  geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
source('~/Dropbox/InPrep/Covid/Perceptions of growth/growth_analysis.R')
source('~/Dropbox/InPrep/Covid/Perceptions of growth/growth_analysis.R')
bigData$guess_index_binned
subjectData = summarise(subjectData, meanconf=mean(conf[guess_index_binned < 6], na.rm=TRUE), meanweber=mean(weber_error, na.rm=TRUE))
subjectData <- group_by(bigData, subj, guess_index_binned, condition)
subjectData = summarise(subjectData, meanconf=mean(conf[guess_index_binned < 6], na.rm=TRUE), meanweber=mean(weber_error, na.rm=TRUE))
subjectData <- group_by(bigData, subj, guess_index_binned, condition)
subjectData = summarise(subjectData, meanconf_early=mean(conf[guess_index_binned < 6], na.rm=TRUE), meanweber_early=mean(weber_error[guess_index_binned < 6], na.rm=TRUE))
subjectData
subjectData <- group_by(bigData, subj, guess_index_binned, condition)
subjectData
help(summarise)
summarise(subjectData, meanconf = mean(conf))
summarise(bigDarta, meanconf = mean(conf))
summarise(bigData, meanconf = mean(conf))
summarise(bigData, meanconf = mean(conf[guess_index_binned < 6]))
summarise(bigData, meanconf = mean(conf[guess_index_binned > 6]))
summarise(bigData, meanconf = mean(conf[guess_index_binned > 6], na.rm=TRUE))
summarise(bigData, meanconf = mean(conf[guess_index_binned < 6], na.rm=TRUE))
subjectData <- group_by(bigData, subj, condition)
subjectData = summarise(subjectData, meanconf_early=mean(conf[guess_index_binned < 6], na.rm=TRUE), meanweber_early=mean(weber_error[guess_index_binned < 6], na.rm=TRUE))
subjectData
trialData <- group_by(bigData, block, guess_index_binned)
trialData = summarise(trialData, medresp=median(resp, na.rm=TRUE), semresp=sd(resp, na.rm=TRUE)/sqrt(length(allids)), medconf=median(conf, na.rm=TRUE), semconf=sd(conf, na.rm=TRUE)/sqrt(length(allids)))
guess_index_binned
bigData$guess_index_binned
subjectData <- group_by(bigData, subj, condition)
subjectData = summarise(subjectData, meanconf_early=mean(conf[guess_index_binned < 6], na.rm=TRUE), meanweber_early=mean(weber_error[guess_index_binned < 6], na.rm=TRUE), meanconf_late=mean(conf[guess_index_binned >= 6], na.rm=TRUE), meanweber_late=mean(weber_error[guess_index_binned >= 6], na.rm=TRUE))
subjectData
View(subjectData)
View(subjectData)
write.csv(subjectData, file="subjectData.csv")
source('~/Dropbox/InPrep/Covid/Perceptions of growth/growth_analysis.R')
ggplot(groundtruth, aes(x=t, y=Nt_lin1)) +
geom_line() +
geom_line(aes(x=t, y=Nt_lin2)) +
geom_line(aes(x=t, y=Nt_exp1)) +
geom_line(aes(x=t, y=Nt_exp2)) +
geom_point(data=trialData, aes(x=guess_index_binned*3, y=medresp, group=block, col=block))
# Plot mean and SE of confidence (z-scored within each subject)
ggplot(conditionData, aes(x=guess_index_binned, y=medconf, group=condition, col=condition)) +
geom_line() +
geom_ribbon(aes(ymin=medconf-semconf, ymax=medconf+semconf) ,alpha=0.2)
source('~/Dropbox/Research/Consciousness/HOSS/JAGS/Precision_check.R')
source('~/Dropbox/Research/Consciousness/HOSS/JAGS/Precision_check.R')
require(rjags)
install.packages(rjags)
install.packages("rjags")
require(rjags)
